{"version":3,"sources":["./src/app/services/gaurds/auth.guard.ts","./src/app/user/user.component.ts","./src/app/user/user.component.html","./src/app/notification/notification.component.ts","./src/app/notification/notification.component.html","./src/app/modal/information-modal/information-modal.component.ts","./src/app/modal/information-modal/information-modal.component.html","./src/environments/environment.ts","./src/app/reset-password/reset-password.component.ts","./src/app/reset-password/reset-password.component.html","./src/app/edit-user/edit-user.component.ts","./src/app/edit-user/edit-user.component.html","./src/app/router-link-renderer/router-link-renderer.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/admin/admin.component.ts","./src/app/admin/admin.component.html","./src/app/app.module.ts","./src/app/modal/confirmation-modal/confirmation-modal.component.ts","./src/app/modal/confirmation-modal/confirmation-modal.component.html","./src/app/sign-up/sign-up.component.ts","./src/app/sign-up/sign-up.component.html","./src/app/services/validation.service.ts","./src/app/services/user.service.ts","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return Boolean(sessionStorage.getItem(\"user\"));\n  }\n  \n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ResetPasswordComponent } from '../reset-password/reset-password.component';\n\n@Component({\n  selector: 'unsta-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  user;\n\n  constructor(private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n    const userData = sessionStorage.getItem(\"user\");\n    this.user = userData ? JSON.parse(userData) : {};\n  }\n\n  openResetPasswordWindow() {\n    this.matDialog.open(ResetPasswordComponent, {\n      data: {},\n      width: \"500px\",\n      disableClose: true\n    });\n  }\n\n}\n","<nav class=\"navbar navbar-expand-sm navbar-light bg-warning\">\n    <div class=\"container\">\n        <a href=\"#\" class=\"navbar-brand\" routerLink=\"adminDashboard\">User</a>\n        <ul class=\"navbar-nav\">\n            <li class=\"nav-item\">\n                <button type=\"button\" class=\"btn btn-link nav-link mat-typography\" (click)=\"openResetPasswordWindow()\">Reset Password</button>\n            </li>\n            <li class=\"nav-item\">\n                <a href=\"#\" class=\"nav-link\" [routerLink]=\"['/login']\" [queryParams]=\"{ u: 'user' }\">Logout</a>\n            </li>\n        </ul>\n    </div>\n</nav>\n<div class=\"container bg-light\">\n    <div class=\"row pt-3 pb-2\">\n        <div class=\"col-sm m-2\">\n            <div class=\"row\">\n                <div class=\"col\"><b>User ID:</b></div>\n                <div class=\"col\">{{ user.id }}</div>\n            </div>\n        </div>\n        <div class=\"col-sm m-2\">\n            <div class=\"row\">\n                <div class=\"col\"><b>Name:</b></div>\n                <div class=\"col\">{{ user.name }}</div>\n            </div>\n        </div>\n        <div class=\"col-sm m-2\">\n            <div class=\"row\">\n                <div class=\"col\"><b>Username:</b></div>\n                <div class=\"col\">{{ user.username }}</div>\n            </div>\n        </div>\n        <div class=\"col-sm m-2\">\n            <div class=\"row\">\n                <div class=\"col\"><b>Email:</b></div>\n                <div class=\"col\">{{ user.email }}</div>\n            </div>\n        </div>\n        <div class=\"col-sm m-2\">\n            <div class=\"row\">\n                <div class=\"col\"><b>Hobbies:</b></div>\n                <div class=\"col\">\n                    <div *ngFor=\"let hobby of user.hobbies\">{{hobby}}</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm m-2\">\n            <div class=\"row\">\n                <div class=\"col\"><b>Highest Qualification:</b></div>\n                <div class=\"col\">{{ user.education }}</div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'unsta-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.css']\n})\nexport class NotificationComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<NotificationComponent>, @Inject(MAT_DIALOG_DATA) public modalData: any) { }\n\n  ngOnInit(): void {\n    this.dialogRef.updatePosition({\n      top: `10px`\n    });\n  }\n\n}\n","\n<div></div>\n<section>\n    <p>{{ modalData.message }}</p>\n</section>\n<section>\n    <span>Please </span>\n    <a href=\"#\" routerLink=\"/login\" [queryParams]=\"{ u: 'user'}\" (click)=\"dialogRef.close()\"> Login </a>\n</section>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'unsta-information-modal',\n  templateUrl: './information-modal.component.html',\n  styleUrls: ['./information-modal.component.css']\n})\nexport class InformationModalComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public modalData: any, private matDialogRef: MatDialogRef<InformationModalComponent>) { }\n\n  ngOnInit(): void {\n  }\n\n  close() {\n    this.matDialogRef.close();\n  }\n\n}\n","<p>{{modalData.message}}</p>\n<button type=\"submit\" class=\"btn btn-primary\" (click)=\"close()\">OK</button>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { InformationModalComponent } from '../modal/information-modal/information-modal.component';\nimport { ValidationService } from '../services/validation.service';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'unsta-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetPasswordForm!: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private valSer: ValidationService, private matDialogRef: MatDialogRef<ResetPasswordComponent>, private userService: UserService, private router: Router, private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.resetPasswordForm = this.formBuilder.group({\n      username: [null, [Validators.required, this.checkDuplicateUsername.bind(this)]],\n      password: [null, [Validators.required, this.passwordPatternValidator.bind(this)]],\n      confirmPassword: [null, [Validators.required, this.confirmPasswordValidator.bind(this)]]\n    });\n  }\n\n  resetPassword() {\n    const user = this.userService.getUserWIthUsername(this.resetPasswordForm.value?.username);\n    if (user.active) {\n      this.userService.updateUser(this.resetPasswordForm.value);\n      if (sessionStorage.getItem(\"user\")) {\n        this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n              this.router.navigate([\"userDashboard\"]));\n      } else {\n        this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n              this.router.navigate([\"login\"], {queryParams: { u: \"user\" }}));\n      }      \n    } else {\n      this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n              this.router.navigate([\"login\"], {queryParams: { u: \"user\" }}));\n      this.matDialog.open(InformationModalComponent, {\n        data: {\n          message: \"Your account has been deactivated by Admin, and you cannot reset the password.\"\n        },\n        width: \"500px\",\n        disableClose: true\n      });\n    }\n    \n            \n    this.close()\n  }\n\n  checkDuplicateUsername(control: AbstractControl): ValidationErrors | null {    \n    if (this.valSer.checkDuplicateUsername(control)) {\n      return null;\n    } else {\n      return { noUsername: true };\n    }\n  }\n\n  passwordPatternValidator(control: AbstractControl): ValidationErrors | null {\n    return this.valSer.passwordPatternValidator(control);\n  }\n\n  confirmPasswordValidator(control: AbstractControl): ValidationErrors | null {\n    return this.valSer.confirmPasswordValidator(this.resetPasswordForm?.get(\"password\"), control);\n  }\n\n  close() {\n    this.matDialogRef.close();\n  }\n\n}\n","<div class=\"container\">\n\t<h2>Reset Password</h2>\n\t<form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\">\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"username\">Username*</label>\n\t\t\t<input type=\"text\" id=\"username\" class=\"form-control\" formControlName=\"username\">\n            <div class=\"helper-block\" *ngIf=\"resetPasswordForm.get('username').invalid && resetPasswordForm.get('username').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"resetPasswordForm.get('username').errors.required\">Username is required!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('username').errors.noUsername && !resetPasswordForm.get('username').errors.required\">Username <i>{{ resetPasswordForm.get('username').value }}</i> is not found!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"password\">Password*</label>\n\t\t\t<input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"password\">\n            <div class=\"helper-block\" *ngIf=\"resetPasswordForm.get('password').invalid && resetPasswordForm.get('password').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"resetPasswordForm.get('password').errors.required\">Password is required!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('password').errors.short\">Password should be minimum 6 char long!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('password').errors.long\">Password is too long!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('password').errors.number\">Password should contain atleast 1 number!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('password').errors.letter\">Password should contain atleast 1 letter!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('password').errors.specialChar\">Password should contain atleast 1 special char!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"confirmPassword\">Confirm Password*</label>\n\t\t\t<input type=\"password\" id=\"confirmPassword\" class=\"form-control\" formControlName=\"confirmPassword\">\n            <div class=\"helper-block\" *ngIf=\"resetPasswordForm.get('confirmPassword').invalid && resetPasswordForm.get('confirmPassword').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"resetPasswordForm.get('confirmPassword').errors.required\">Confirm Password is required!</div>\n                    <div *ngSwitchCase=\"resetPasswordForm.get('confirmPassword').errors.misMatch\">Password and Confirm Password should be same!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"mt-2\">\n\t\t\t<button type=\"button\" class=\"btn btn-warning mr-1\" (click)=\"close()\">Cancel</button>\n\t\t\t<button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"resetPasswordForm.invalid\">Reset</button>\n\t\t</div>\n\t</form>\n    <div class=\"bg-light mt-3\">\n        <span> Already have an account? <a href=\"#\" [routerLink]=\"['/login']\" [queryParams]=\"{ u: 'user' }\">Login</a> here.</span>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'unsta-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})\nexport class EditUserComponent implements OnInit {\n\n  userForm!: FormGroup;\n\n  constructor(private activatedRoute: ActivatedRoute, private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.userForm = this.formBuilder.group({\n      id: [],\n      name: [],\n      username: [],\n      email: []\n    });\n    this.activatedRoute.params.subscribe(\n      (params: Params) => {\n        const userId = params['id'];\n        const users = sessionStorage.getItem(\"users\");\n        const user = users ? JSON.parse(users).find(\n          (user) => {\n            return +userId === +user.id;\n          }\n        ) : {};\n        this.userForm.setValue({\n          id: user?.id,\n          name: user?.name,\n          username: user?.username,\n          email: user?.email\n        });\n      }\n    );\n  }\n\n  updateUser() {\n    const user = {\n      id: this.userForm.value.id,\n      email: this.userForm.value.email,\n      name: this.userForm.value.name,\n      username: this.userForm.value.username\n    }\n    this.userService.updateUser(user);\n    this.router.navigate([\"/adminDashboard\"]);\n  }\n\n  cancel(): void {\n    this.router.navigate([\"/adminDashboard\"]);\n  }\n\n}\n","<div class=\"container\">\n    <form [formGroup]=\"userForm\" (ngSubmit)=\"updateUser()\">\n        <h3 class=\"mt-3\">Edit</h3>\n        <div class=\"form-group\">\n            <label for=\"id\" class=\"control-label\">User ID</label>\n            <input type=\"text\" id=\"id\" class=\"form-control\" formControlName=\"id\" name=\"id\" readonly>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"name\" class=\"control-label\">Name</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"name\" name=\"name\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"username\" class=\"control-label\">Username</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"username\" name=\"username\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\" class=\"control-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" formControlName=\"email\" name=\"email\">\n        </div>\n\n        <button type=\"button\" class=\"btn btn-danger mr-2\" (click)=\"cancel()\">Cancel</button>\n        <button class=\"btn btn-outline-primary\">Save</button>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { AgRendererComponent } from 'ag-grid-angular';\nimport { ConfirmationModalComponent } from '../modal/confirmation-modal/confirmation-modal.component';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'unsta-router-link-renderer',\n  template: `<a href=\"#\" class=\"btn btn-sm btn-primary mr-2\" routerLink=\"../edit/{{params.data.id}}\">Edit</a>\n              <button type=\"button\" class=\"btn btn-sm btn-warning mr-2\" (click)=\"onActivateOrDeactivate(params.data)\">{{ params.data.active ? 'Deactivate' : 'Activate'}}</button>\n              <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"onDeleteUser(params.data.username)\">Delete</button>\n            `,\n  styleUrls: ['./router-link-renderer.component.css']\n})\nexport class RouterLinkRendererComponent implements OnInit, AgRendererComponent {\n\n  params: any;\n\n  constructor(private userService: UserService, private router: Router, private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  agInit(params: any): void {\n    this.params = params;\n  }\n\n  refresh(params: any): boolean {\n    return false;\n  }\n\n  onActivateOrDeactivate(user) {\n    user.active = !user.active;\n    this.userService.updateUser(user);\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n            this.router.navigate([\"adminDashboard\"]));\n  }\n\n  onDeleteUser(username: string) {\n    this.matDialog.open(ConfirmationModalComponent, {\n      data: {\n        message: \"Do you want to Delete?\",\n        redirect: () => {\n          this.userService.deleteUser(username);\n          this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n            this.router.navigate([\"adminDashboard\"]));\n        }\n      },\n      width: \"500px\",\n      disableClose: true\n    });\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'unstagram';\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { RouterLinkRendererComponent } from '../router-link-renderer/router-link-renderer.component';\n\n@Component({\n  selector: 'unsta-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  public users: any[] = [];\n  defaulfColDefs: any = {\n    resizable: true,\n    wrapText: true,\n    sortable: true,\n    filter: true\n  };\n  columnDefs = [\n    { field: \"id\", headerName: \"Sl No\" },\n    {\n      field: \"name\", headerName: \"Name\"\n    },\n    { field: \"username\", headerName: \"Username\" },\n    { field: \"email\", headerName: \"Email\" },\n    { field: \"active\", width: 300, headerName: \"Edit/Activate/Deactivate/Delete\", cellRendererFramework: RouterLinkRendererComponent }\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    const users = sessionStorage.getItem(\"users\");\n    let allUsers = users ? JSON.parse(users) : [];\n    this.createGridData(allUsers);\n  }\n\n  createGridData(users: any[]) {\n    this.users = users.map((user, i) => {\n      return {\n        id: i,\n        name: user.name,\n        email: user.email,\n        username: user.username,\n        active: user.active\n      };\n    });\n  }\n}\n","<nav class=\"navbar navbar-light bg-success\">\n    <div class=\"container\">\n        <a href=\"#\" class=\"navbar-brand\" routerLink=\"/adminDashboard\">Admin</a>\n        <ul class=\"navbar-nav\">\n            <li class=\"nav-item\">\n                <a href=\"#\" class=\"nav-link\" [routerLink]=\"['/login']\" [queryParams]=\"{ u: 'admin' }\">Logout</a>\n            </li>\n        </ul>\n    </div>\n</nav>\n\n<div class=\"container\">\n    <ag-grid-angular style=\"width: 100%; height: 300px;\" class=\"ag-theme-alpine\" [rowData]=\"users\"\n        [columnDefs]=\"columnDefs\" [defaultColDef]=\"defaulfColDefs\"></ag-grid-angular>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UserComponent } from './user/user.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { RouterLinkRendererComponent } from './router-link-renderer/router-link-renderer.component';\nimport { EditUserComponent } from './edit-user/edit-user.component';\nimport { ConfirmationModalComponent } from './modal/confirmation-modal/confirmation-modal.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { InformationModalComponent } from './modal/information-modal/information-modal.component';\nimport { NotificationComponent } from './notification/notification.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignUpComponent,\n    UserComponent,\n    AdminComponent,\n    RouterLinkRendererComponent,\n    EditUserComponent,\n    ConfirmationModalComponent,\n    ResetPasswordComponent,\n    InformationModalComponent,\n    NotificationComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AgGridModule.withComponents([RouterLinkRendererComponent]),\n    MatDialogModule,\n    MatIconModule,\n    \n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'unsta-confirmation-modal',\n  templateUrl: './confirmation-modal.component.html',\n  styleUrls: ['./confirmation-modal.component.css']\n})\nexport class ConfirmationModalComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public modalData: any, private matDialogRef: MatDialogRef<ConfirmationModalComponent>) { }\n\n  ngOnInit(): void {\n  }\n\n  close() {\n    this.matDialogRef.close();\n  }\n\n  redirect() {\n    this.modalData.redirect();\n    this.close();\n  }\n\n}\n","<div>\n\t<div class=\"modal-header\">\n\t\t<mat-icon class=\"hand-cursor close-icon material-icons ml-auto\" (click)=\"close()\">close</mat-icon>\n\t</div>\n\n\t<div class=\"modal-body no-padding-top\">\n\t\t<div class=\"text-center\">\n\t\t\t<mat-dialog-content>{{ modalData.message }}</mat-dialog-content>\n\t\t</div>\n\t</div>\n\n\t<div class=\"modal-footer no-padding\">\n\t\t<div class=\"text-center\">\n\t\t\t<button type=\"button\" mat-flat-button tabindex=\"-1\" class=\"btn btn-warning\" [mat-dialog-close]=\"false\">No</button>\n\t\t</div>\n\t\t<div class=\"text-center\">\n\t\t\t<button type=\"button\" mat-flat-button class=\"btn btn-info\" (click)=\"redirect()\">Yes</button>\n\t\t</div>\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { NotificationComponent } from '../notification/notification.component';\nimport { ValidationService } from '../services/validation.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent implements OnInit {\n\n  signupForm!: FormGroup;\n  hobbies: string[] = [\"Cricket\", \"Movies\", \"Web series\", \"News\", \"Chess\"];\n  constructor(private formBuilder: FormBuilder, private valSer: ValidationService, private matDialog: MatDialog, private router: Router) { }\n\n  ngOnInit(): void {\n    this.signupForm = this.formBuilder.group({\n      \"name\": [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n      username: [null, [Validators.required, this.checkDuplicateUsername.bind(this)]],\n      password: [null, [Validators.required, this.passwordPatternValidator.bind(this)]],\n      confirmPassword: [null, [Validators.required, this.confirmPasswordValidator.bind(this)]],\n      profilePic: [null],\n      gender: [\"male\"],\n      education: [null, Validators.required],\n      hobbies: this.formBuilder.array(this.hobbies.map((x) => false))\n    });\n  }\n\n  onSignupSubmit() {\n    let users = sessionStorage.getItem(\"users\");\n    let usersList = users ? JSON.parse(users) : [];\n    this.signupForm.value.hobbies = this.getHobbyValues();\n    let user = this.signupForm.value;\n    user.id = usersList.length + \"\";\n    user.active = true;\n    usersList.push(user)\n    sessionStorage.setItem(\"users\", JSON.stringify(usersList));\n    this.matDialog.open(NotificationComponent, {\n      data: {\n        message: \"User created with ID: \" + user.id\n      },\n      width: \"250px\",\n      height: \"100px\"\n    });\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n            this.router.navigate([\"signup\"]));\n  }\n\n  checkDuplicateUsername(control: AbstractControl): ValidationErrors | null {    \n    return this.valSer.checkDuplicateUsername(control);\n  }\n\n  passwordPatternValidator(control: AbstractControl): ValidationErrors | null {\n    return this.valSer.passwordPatternValidator(control);\n  }\n\n  confirmPasswordValidator(control: AbstractControl): ValidationErrors | null {\n    return this.valSer.confirmPasswordValidator(this.signupForm?.get(\"password\"), control);\n  }\n\n  getHobbyValues() {\n    return this.hobbies.filter((h, i) => {\n      return this.signupForm.value.hobbies[i];\n    });\n  }\n\n}\n","<div class=\"container\">\n\t<h2>Welcome to IndoBytes</h2>\n\t<form [formGroup]=\"signupForm\" (ngSubmit)=\"onSignupSubmit()\">\n\t\t<h4>User Registration Form</h4>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"name\">Name*</label>\n\t\t\t<input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n            <div class=\"helper-block\" *ngIf=\"signupForm.get('name').invalid && signupForm.get('name').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"signupForm.get('name').errors.required\">Name is required!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"email\">Email*</label>\n\t\t\t<input type=\"email\" id=\"email\" class=\"form-control\" formControlName=\"email\">\n            <div class=\"helper-block\" *ngIf=\"signupForm.get('email').invalid && signupForm.get('email').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"signupForm.get('email').errors.required\">Email is required!</div>\n                    <div *ngSwitchCase=\"signupForm.get('email').errors.email\">Invalid Email!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"username\">Username*</label>\n\t\t\t<input type=\"text\" id=\"username\" class=\"form-control\" formControlName=\"username\">\n            <div class=\"helper-block\" *ngIf=\"signupForm.get('username').invalid && signupForm.get('username').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"signupForm.get('username').errors.required\">Username is required!</div>\n                    <div *ngSwitchCase=\"signupForm.get('username').errors.duplicate\">Username <i>{{ signupForm.get('username').value }}</i> is already taken!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"password\">Password*</label>\n\t\t\t<input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"password\">\n            <div class=\"helper-block\" *ngIf=\"signupForm.get('password').invalid && signupForm.get('password').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"signupForm.get('password').errors.required\">Password is required!</div>\n                    <div *ngSwitchCase=\"signupForm.get('password').errors.short\">Password should be minimum 6 char long!</div>\n                    <div *ngSwitchCase=\"signupForm.get('password').errors.long\">Password is too long!</div>\n                    <div *ngSwitchCase=\"signupForm.get('password').errors.number\">Password should contain atleast 1 number!</div>\n                    <div *ngSwitchCase=\"signupForm.get('password').errors.letter\">Password should contain atleast 1 letter!</div>\n                    <div *ngSwitchCase=\"signupForm.get('password').errors.specialChar\">Password should contain atleast 1 special char!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"confirmPassword\">Confirm Password*</label>\n\t\t\t<input type=\"password\" id=\"confirmPassword\" class=\"form-control\" formControlName=\"confirmPassword\">\n            <div class=\"helper-block\" *ngIf=\"signupForm.get('confirmPassword').invalid && signupForm.get('confirmPassword').touched\">\n                <div [ngSwitch]=\"true\">\n                    <div *ngSwitchCase=\"signupForm.get('confirmPassword').errors.misMatch\">Password and Confirm Password should be same!</div>\n                </div>\n            </div>\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"profilePic\">Profile Picture</label>\n\t\t\t<input type=\"file\" id=\"profilePic\" class=\"profile-pic-form-control\" formControlName=\"profilePic\">\n\t\t</div>\n\t\t<div class=\"form-froup\">\n\t\t\t<label for=\"gender\">\n\t\t\t\tMale <input type=\"radio\" id=\"male\" [value]=\"'male'\" class=\"\" formControlName=\"gender\">\n\t\t\t\tFemale <input type=\"radio\" id=\"female\" [value]=\"'female'\" class=\"\" formControlName=\"gender\">\n\t\t\t</label>\n\t\t</div>\n        <div class=\"form-froup\">\n            <label for=\"education\">Education</label>\n            <select class=\"form-control\" name=\"education\" id=\"education\" formControlName=\"education\">\n                <option value=\"null\">Select</option>\n                <option value=\"1\">Masters</option>\n                <option value=\"2\">Graduation</option>\n                <option value=\"3\">Diploma </option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"\">Hobbies</label>\n            <div formArrayName=\"hobbies\" *ngFor=\"let hobby of hobbies; let i = index\">\n                <input type=\"checkbox\" [formControlName]=\"i\">\n                <span class=\"ml-1\">{{hobby}}</span>\n            </div>\n        </div>\n\t\t<div>\n\t\t\t<button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"signupForm.invalid\">Sign-Up</button>\n\t\t</div>\n\t</form>\n    <div class=\"bg-light mt-3\">\n        <span> Already have an account? <a href=\"#\" [routerLink]=\"['/login']\" [queryParams]=\"{ u: 'user' }\">Login</a> here.</span>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n\n  constructor() { }\n\n  checkDuplicateUsername(control: AbstractControl): ValidationErrors | null {\n    let users = sessionStorage.getItem(\"users\");\n    let usersList = users ? JSON.parse(users) : [];\n    const user = usersList?.find((u) => {\n      return u.username === control.value;\n    });\n\n    return user ? { duplicate: true } : null;\n  }\n\n  passwordPatternValidator(control: AbstractControl): ValidationErrors | null {\n    if (control.value?.length === 0) {\n      return null;\n    }\n    if (control.value?.length < 6) {\n      return { short: true };\n    } else if (control.value?.length > 50) {\n      return { long: true };\n    } else if (control.value?.search(/\\d/) === -1) {\n      return { number: true };\n    } else if (control.value?.search(/[a-zA-Z]/) === -1) {\n      return { letter: true };\n    } else if (control.value?.search(/[!@#$%&()_=<>?^*-]/) === -1) {\n      return { specialChar: true };\n    }\n    return null;\n  }\n\n  confirmPasswordValidator(pControl: AbstractControl, cpControl: AbstractControl): ValidationErrors | null {\n    return cpControl?.value !== pControl?.value ? { misMatch: true } : null;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  constructor() { }\n\n  checkUserLogin(loginData) {\n    const users = sessionStorage.getItem(\"users\");\n    let allUsers = users ? JSON.parse(users) : [];\n\n    const user = allUsers.find(user => (user.username === loginData.username || user.email === loginData.username) && user.password === loginData.password);\n    if (user) {\n      sessionStorage.setItem(\"user\", JSON.stringify(user));\n      return user;\n    } else return null;\n  }\n\n  updateUser(userToUpdate): void {\n    const users = sessionStorage.getItem(\"users\");\n    let allUsers = users ? JSON.parse(users) : [];\n\n    const userInd = allUsers.findIndex(user => user.username === userToUpdate.username || user.id === userToUpdate.id);\n    userToUpdate = {...allUsers[userInd], ...userToUpdate};\n    allUsers[userInd] = userToUpdate;\n    sessionStorage.setItem(\"users\", JSON.stringify(allUsers));\n    return userToUpdate;\n  }\n  \n  deleteUser(username: string) {\n    const users = sessionStorage.getItem(\"users\");\n    let allUsers = users ? JSON.parse(users) : [];\n\n    const userInd = allUsers.findIndex(user => user.username === username);\n    allUsers.splice(userInd, 1);\n    sessionStorage.setItem(\"users\", JSON.stringify(allUsers));\n  }\n\n  getUserWIthUsername(username: string) {\n    const users = sessionStorage.getItem(\"users\");\n    let allUsers = users ? JSON.parse(users) : [];\n\n    const user = allUsers.find(user => user.username === username);\n    return user;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminComponent } from './admin/admin.component';\nimport { EditUserComponent } from './edit-user/edit-user.component';\nimport { LoginComponent } from './login/login.component';\nimport { AuthGuard } from './services/gaurds/auth.guard';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport { UserComponent } from './user/user.component';\n\nconst routes: Routes = [\n  {\n    path: \"login\",\n    component: LoginComponent\n  },\n  {\n    path: \"signup\",\n    component: SignUpComponent\n  },\n  {\n    path: \"userDashboard\",\n    component: UserComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: \"adminDashboard\",\n    component: AdminComponent\n  },\n  {\n    path: \"edit/:id\",\n    component: EditUserComponent\n  },\n  {\n    path: \"\",\n    redirectTo: \"/login?u=user\",\n    pathMatch: \"full\"\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\n\nimport { InformationModalComponent } from '../modal/information-modal/information-modal.component';\nimport { ResetPasswordComponent } from '../reset-password/reset-password.component';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'unsta-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginError: string = \"\";\n\n  constructor(private router: Router, private activatedRoute: ActivatedRoute, private userService: UserService, private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n    sessionStorage.removeItem(\"user\");\n  }\n\n  submitLogin(loginData: NgForm): void {\n    this.activatedRoute.queryParams.pipe(take(1)).subscribe((params: Params) => {\n      if (params[\"u\"] === \"user\") {\n        let user = this.userService.checkUserLogin(loginData.value);\n        if (user) {\n          this.loginError = \"\";\n          if (user.active) {\n            this.router.navigate([\"userDashboard\"]);\n          } else {\n            sessionStorage.removeItem(\"user\");\n            this.matDialog.open(InformationModalComponent, {\n              data: {\n                message: \"Your account has been deactivated by Admin.\"\n              },\n              width: \"500px\",\n              disableClose: true\n            });\n          }                  \n        } else {\n          this.loginError = \"Invalid credentials!\"\n        }\n      } else if (params[\"u\"] === \"admin\") {\n        this.router.navigate([\"adminDashboard\"]);\n      }\n    });\n  }\n\n  openResetPasswordWindow() {\n    this.matDialog.open(ResetPasswordComponent, {\n      data: {},\n      width: \"500px\",\n      disableClose: true\n    });\n  }\n}\n","<div class=\"container\">\n    <ul class=\"nav nav-tabs nav-fill mt-1\">\n        <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\" [routerLink]=\"['/login']\" [queryParams]=\"{ u: 'user' }\" routerLinkActive=\"active\">User</a>\n        </li>\n        <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\" [routerLink]=\"['/login']\" [queryParams]=\"{ u: 'admin' }\" routerLinkActive=\"active\">Admin</a>\n        </li>\n    </ul>\n    <form #loginForm=\"ngForm\" (ngSubmit)=\"submitLogin(loginForm)\" class=\"mt-2\">\n        <!-- Panel -->\n        <div class=\"panel\">\n            <!-- Heading -->\n            <div class=\"panel-heading\">\n                <h4><b> Login </b></h4>\n            </div>\n    \n            <!-- Body -->\n            <div class=\"panel-body\">\n                <div *ngIf=\"loginError\" class=\"danger-color\">\n                    {{ loginError }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"username\" class=\"control-label\">Username/Email ID*</label>\n                    <input type=\"text\"\n                        id=\"username\"\n                        class=\"form-control\"\n                        ngModel\n                        name=\"username\"\n                        #username=\"ngModel\"\n                        required>\n                    <div class=\"help-block danger-color\" *ngIf=\"username.invalid && username.touched\">\n                        Username number is required.\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\" class=\"control-label\">Password*</label>\n                    <input type=\"password\" id=\"password\" class=\"form-control\" ngModel name=\"password\"\n                        #password=\"ngModel\" required password>\n                    <div class=\"help-block danger-color\" *ngIf=\"password.invalid && password.touched\">\n                        Password is required.\n                    </div>\n                </div>\n            </div>\n    \n            <!-- Footer -->\n            <div class=\"panel panel-footer align-right\">\n                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loginForm.invalid\">Login</button>\n            </div>\n        </div>\n    </form>\n    <div class=\"bg-light mt-2\">\n        <span> Don't have an account? <a href=\"#\" [routerLink]=\"['/signup']\">Sign Up</a> here.</span>\n    </div>\n    <div class=\"bg-light mt-2\">\n        <span> Forgot password? <button type=\"button\" class=\"btn btn-link\" (click)=\"openResetPasswordWindow()\">Reset</button> here.</span>\n    </div>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}